import socket
import threading
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
from playsound import playsound
import pygame
import os
from tkinter import simpledialog
import client  # Import client.py ƒë·ªÉ g·ªçi l·∫°i menu ch√≠nh


# ƒê·ªãa ch·ªâ IP v√† c·ªïng k·∫øt n·ªëi c·ªßa server
HOST = '127.0.0.1'
PORT = 12345

# L·ªõp RPSServerClient ƒë·ªÉ qu·∫£n l√Ω giao di·ªán v√† logic c·ªßa tr√≤ ch∆°i tr·ª±c tuy·∫øn
class RPSServerClient:
    def __init__(self, root):
        self.root = root
        self.root.title("Rock-Paper-Scissors - Online")
        self.root.geometry("700x600")
        self.root.configure(bg="#e6f2ff")

        self.score = 0
        self.sound_on = True
        self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

        self.room_name = self.ask_room()
        self.setup_ui()
        self.init_background_music()

        try:
            self.client.connect((HOST, PORT))
            self.client.send(f"JOIN:{self.room_name}".encode())
            threading.Thread(target=self.receive_result, daemon=True).start()
        except:
            messagebox.showerror("Error", "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server")
            self.root.destroy()
    # H√†m ƒë·ªÉ h·ªèi t√™n ph√≤ng t·ª´ ng∆∞·ªùi d√πng
    def ask_room(self):
        return tk.simpledialog.askstring("Room Name", "Nh·∫≠p t√™n ph√≤ng:") or "default"
    # H√†m ƒë·ªÉ thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng
    def setup_ui(self):
        self.score_label = tk.Label(self.root, text=f"Your Score: {self.score}", font=("Arial", 14, "bold"), fg="blue", bg="#e6f2ff")
        self.score_label.pack(pady=5)

        self.buttons_frame = tk.Frame(self.root, bg="#e6f2ff")
        self.buttons_frame.pack(pady=10)

        self.rock_img = ImageTk.PhotoImage(Image.open("rock.png").resize((80, 80)))
        self.paper_img = ImageTk.PhotoImage(Image.open("paper.png").resize((80, 80)))
        self.scissors_img = ImageTk.PhotoImage(Image.open("scissors.png").resize((80, 80)))

        tk.Button(self.buttons_frame, image=self.rock_img, command=lambda: self.send_choice("rock"), bg="#e6f2ff", bd=0).grid(row=0, column=0, padx=20)
        tk.Button(self.buttons_frame, image=self.paper_img, command=lambda: self.send_choice("paper"), bg="#e6f2ff", bd=0).grid(row=0, column=1, padx=20)
        tk.Button(self.buttons_frame, image=self.scissors_img, command=lambda: self.send_choice("scissors"), bg="#e6f2ff", bd=0).grid(row=0, column=2, padx=20)

        self.result_text = tk.Text(self.root, height=12, width=80, bg="white", font=("Consolas", 11))
        self.result_text.pack(pady=10)
        self.result_text.config(state=tk.DISABLED)

        chat_frame = tk.Frame(self.root, bg="#e6f2ff")
        chat_frame.pack(pady=5)

        self.chat_entry = tk.Entry(chat_frame, width=50, font=("Arial", 11))
        self.chat_entry.pack(side=tk.LEFT, padx=5)

        self.send_button = tk.Button(chat_frame, text="Send", command=self.send_chat, bg="#2196F3", fg="white")
        self.send_button.pack(side=tk.LEFT)

        self.toggle_sound_button = tk.Button(self.root, text="üîä Sound: ON", command=self.toggle_sound, bg="#cccccc")
        self.toggle_sound_button.pack(pady=5)

        # Th√™m n√∫t Quay l·∫°i
        tk.Button(self.root, text="Quay l·∫°i", font=("Arial", 14), width=20, command=self.back_to_menu, bg="#ff6666", fg="white").pack(pady=10)
    # H√†m ƒë·ªÉ kh·ªüi t·∫°o nh·∫°c n·ªÅn
    def init_background_music(self):
        try:
            pygame.mixer.init()
            pygame.mixer.music.load("background.wav")
            pygame.mixer.music.set_volume(0.3 if self.sound_on else 0)
            pygame.mixer.music.play(-1)
        except:
            pass
# H√†m ƒë·ªÉ ph√°t √¢m thanh khi c√≥ s·ª± ki·ªán
    def play_sound(self, filename):
        if self.sound_on and os.path.exists(filename):
            threading.Thread(target=lambda: playsound(filename), daemon=True).start()
    # H√†m ƒë·ªÉ b·∫≠t/t·∫Øt √¢m thanh
    def toggle_sound(self):
        self.sound_on = not self.sound_on
        self.toggle_sound_button.config(text="üîá Sound: OFF" if not self.sound_on else "üîä Sound: ON")
        try:
            pygame.mixer.music.set_volume(0.3 if self.sound_on else 0)
        except:
            pass
            # H√†m ƒë·ªÉ g·ª≠i l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi ch∆°i t·ªõi server
    def send_choice(self, choice):
        self.play_sound("click.wav")
        self.result_text.config(state=tk.NORMAL)
        self.result_text.insert(tk.END, f"You chose: {choice}\n", "info")
        self.result_text.config(state=tk.DISABLED)
        try:
            self.client.send(f"GAME:{choice}".encode())
        except:
            messagebox.showerror("Error", "Kh√¥ng th·ªÉ g·ª≠i l·ª±a ch·ªçn t·ªõi server")
    # H√†m ƒë·ªÉ g·ª≠i tin nh·∫Øn chat t·ªõi server
    def send_chat(self):
        message = self.chat_entry.get().strip()
        if message:
            try:
                self.client.send(f"CHAT:{message}".encode())
                self.result_text.config(state=tk.NORMAL)
                self.result_text.insert(tk.END, f"You: {message}\n", "chat")
                self.result_text.config(state=tk.DISABLED)
                self.chat_entry.delete(0, tk.END)
            except:
                messagebox.showerror("Error", "Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn")
    # H√†m ƒë·ªÉ nh·∫≠n k·∫øt qu·∫£ t·ª´ server
    def receive_result(self):
        while True:
            try:
                result = self.client.recv(1024).decode()
                self.result_text.config(state=tk.NORMAL)

                if result.startswith("[CHAT]"):
                    self.result_text.insert(tk.END, f"{result}\n", "chat")
                elif result.startswith("[INFO]"):
                    self.result_text.insert(tk.END, f"{result}\n", "info")
                elif "result: win" in result.lower():
                    self.play_sound("win.wav")
                    self.score += 1
                    self.result_text.insert(tk.END, f"{result}\n\n", "win")
                elif "result: lose" in result.lower():
                    self.play_sound("lose.wav")
                    self.result_text.insert(tk.END, f"{result}\n\n", "lose")
                elif "result: draw" in result.lower():
                    self.play_sound("draw.wav")
                    self.result_text.insert(tk.END, f"{result}\n\n", "draw")
                self.score_label.config(text=f"Your Score: {self.score}")
                self.result_text.config(state=tk.DISABLED)
            except:
                break
     # H√†m ƒë·ªÉ quay l·∫°i menu ch√≠nh           
    def back_to_menu(self):
        try:
            self.client.send("QUIT".encode())  # G·ª≠i t√≠n hi·ªáu tho√°t t·ªõi server
            self.client.close()  # ƒê√≥ng k·∫øt n·ªëi
        except:
            pass
        pygame.mixer.music.stop()  # D·ª´ng nh·∫°c n·ªÅn
        self.root.destroy()  # ƒê√≥ng c·ª≠a s·ªï hi·ªán t·∫°i
        new_root = tk.Tk()  # T·∫°o c·ª≠a s·ªï m·ªõi
        app = client.RPSClient(new_root)  # Kh·ªüi t·∫°o menu ch√≠nh
        new_root.mainloop()
# # H√†m ƒë·ªÉ kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng
if __name__ == "__main__":
    root = tk.Tk()
    app = RPSServerClient(root)
    app.result_text.tag_config("win", foreground="green", font=("Consolas", 11, "bold"))
    app.result_text.tag_config("lose", foreground="red", font=("Consolas", 11, "bold"))
    app.result_text.tag_config("draw", foreground="orange", font=("Consolas", 11, "italic"))
    app.result_text.tag_config("chat", foreground="purple")
    app.result_text.tag_config("info", foreground="blue")
    root.mainloop()